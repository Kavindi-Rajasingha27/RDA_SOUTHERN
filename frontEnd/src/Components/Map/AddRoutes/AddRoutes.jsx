import axios from "axios";
import L from "leaflet";
import "leaflet-routing-machine";
import "leaflet-routing-machine/dist/leaflet-routing-machine.css";
import "leaflet/dist/leaflet.css";
import React, { useState } from "react";
import {
  GeoJSON,
  MapContainer,
  Marker,
  Popup,
  TileLayer,
  useMapEvent,
} from "react-leaflet";
import { toast } from "react-toastify";
import Swal from "sweetalert2";

const API_BASE_URL = "http://127.0.0.1:8000/api";

const AddRoutes = ({ center, zoom }) => {
  const token = localStorage.getItem("token");
  const axiosConfig = {
    headers: { Authorization: `Bearer ${token}` },
  };

  const [startPoint, setStartPoint] = useState(null);
  const [endPoint, setEndPoint] = useState(null);

  // Sample GeoJSON data for Southern Province boundary
  const southernProvinceGeoJSON = {
    type: "Feature",
    geometry: {
      coordinates: [
        [
          [79.9964062712956, 6.422039853327178],
          [79.99307243198092, 6.41474845966907],
          [80.00504124815842, 6.385408547160168],
          [80.00742587186085, 6.360858675107323],
          [80.02416915009536, 6.327578612861942],
          [80.0305473445656, 6.298252636447131],
          [80.02008138441067, 6.291424645074798],
          [80.02406915581736, 6.273191059996577],
          [80.03922268073188, 6.24147896321476],
          [80.05437620564828, 6.2137293034205925],
          [80.05517375959022, 6.192321422806643],
          [80.0854826059367, 6.155846212280196],
          [80.08946971501655, 6.134436925075747],
          [80.11499060359506, 6.1146131271868995],
          [80.15008149328338, 6.070203737796518],
          [80.1732099809397, 6.047204131604744],
          [80.21781669462467, 6.017284056066359],
          [80.23059269821141, 6.024425987576862],
          [80.23457081145852, 6.003796474191958],
          [80.2489333951296, 5.999036688874611],
          [80.28402877714706, 5.989513453731746],
          [80.31434371485557, 5.987132492073499],
          [80.32630853442498, 5.979990147846479],
          [80.35423276568434, 5.964914334954585],
          [80.39093403396225, 5.958568609704471],
          [80.42045228264561, 5.946665738826397],
          [80.42763288357747, 5.952221307986548],
          [80.43481405297399, 5.96730023667503],
          [80.44997155174661, 5.960158959981939],
          [80.43880221893949, 5.954602685802811],
          [80.43561023510921, 5.942697371235866],
          [80.46672461780162, 5.929998625104744],
          [80.50342440824613, 5.929998349011626],
          [80.52735956512726, 5.926823035348818],
          [80.54988080641021, 5.934975210155031],
          [80.56742876939876, 5.927040219246365],
          [80.5897634704956, 5.910377594058517],
          [80.6136940811171, 5.919105413172545],
          [80.64401610575106, 5.941334039796118],
          [80.67273169381184, 5.95006244546687],
          [80.69665785821417, 5.9460907457847725],
          [80.7445145535379, 5.965120528649564],
          [80.75488768615395, 5.987359472287068],
          [80.79636226732066, 6.007971589994639],
          [80.8123175145592, 6.027003690723163],
          [80.82986475105389, 6.034938009060028],
          [80.85698737134982, 6.034936029554373],
          [80.89448095839651, 6.051592839680595],
          [80.95829319279585, 6.078560651168161],
          [80.99020885668597, 6.0912575189826725],
          [81.0197188900504, 6.098392958479195],
          [81.06678051087681, 6.102356601387243],
          [81.11225077833808, 6.111877628701137],
          [81.16649300039529, 6.131704592483388],
          [81.18803104284962, 6.1547039671388575],
          [81.22233218018499, 6.1610487528220546],
          [81.24546550536303, 6.175324243190531],
          [81.28215974530218, 6.183254904943681],
          [81.30848138410425, 6.194357945895277],
          [81.32603059532829, 6.192771872534308],
          [81.3363173851306, 6.21174796948533],
          [81.37380863689185, 6.229193648548787],
          [81.40253353250614, 6.247443222312455],
          [81.42885045716281, 6.275979202720293],
          [81.45837297948083, 6.298986269983047],
          [81.48229862227709, 6.302943958705924],
          [81.49985635743582, 6.3386384998183445],
          [81.51579797399114, 6.352885277931421],
          [81.55647957128758, 6.369532825709925],
          [81.60274506923736, 6.397279689425645],
          [81.64342619902516, 6.439291948830373],
          [81.6984698065117, 6.486055023049161],
          [81.7096297538435, 6.514586678890453],
          [81.67452870746456, 6.523303006332867],
          [81.65857145699869, 6.54311115253212],
          [81.63863071943888, 6.5439023176739255],
          [81.62586749078986, 6.565291678147574],
          [81.61310610211058, 6.5795490987624845],
          [81.59635854910567, 6.5613251889027],
          [81.58439680363693, 6.551816394565122],
          [81.54478655023331, 6.54954315681168],
          [81.52373796042798, 6.523406410765446],
          [81.4842791583655, 6.5064169415859965],
          [81.48299362573562, 6.458083052931187],
          [81.4738043504671, 6.41887914289461],
          [81.4382766100253, 6.4319449181114265],
          [81.4185488675563, 6.412339661749783],
          [81.4014452669087, 6.420180256839558],
          [81.37118163858884, 6.394032440018023],
          [81.28303300107137, 6.361352320598016],
          [81.24758642907017, 6.341747433489658],
          [81.2186641470816, 6.350897833047355],
          [81.20550078292746, 6.374426045283485],
          [81.19760530822714, 6.396645735031541],
          [81.1752415857867, 6.404486987412383],
          [81.15024211981739, 6.399257136905277],
          [81.14234161004242, 6.4162451257566175],
          [81.1002326271481, 6.422772009255539],
          [81.07261084510907, 6.4162361737778895],
          [81.05814082516451, 6.426687743574362],
          [81.05815248673196, 6.409704341749517],
          [81.04764799571586, 6.392719577249039],
          [81.02923208952393, 6.400559580079829],
          [81.0134528753992, 6.387491211927681],
          [81.02397975256326, 6.3600461630258565],
          [81.01871101442612, 6.336519775580655],
          [80.95823073859617, 6.311682822565544],
          [80.93325080206381, 6.295992103107196],
          [80.93851475876602, 6.277687070217837],
          [80.93983013999912, 6.261997608378707],
          [80.94772704586597, 6.239765506045742],
          [80.93325542737239, 6.234537888346878],
          [80.90694448548629, 6.238466502393862],
          [80.8845826363268, 6.251545331489368],
          [80.87537438735785, 6.271158996328069],
          [80.84380992847622, 6.269857761384614],
          [80.80699381484692, 6.264644095871347],
          [80.7556384679043, 6.280331331321506],
          [80.71340820069565, 6.298618999217666],
          [80.6709985508632, 6.323395719140706],
          [80.67361548523502, 6.341658257178736],
          [80.65769817823156, 6.357277708990651],
          [80.61577748888965, 6.35077127240308],
          [80.62963083405924, 6.3923043243430016],
          [80.59948039810428, 6.3896910703899295],
          [80.54595285258546, 6.388462999088645],
          [80.51083607346902, 6.370345560401205],
          [80.48983151149883, 6.38077574435367],
          [80.44913977910846, 6.388592657028397],
          [80.39275386106345, 6.417351473552699],
          [80.3639066320896, 6.422688355227322],
          [80.33500376583618, 6.4044657174166275],
          [80.29687192986819, 6.3953385857453355],
          [80.30344968463584, 6.353509386555274],
          [80.30082323094524, 6.327368636915878],
          [80.28899373351788, 6.340431587837628],
          [80.23373721063757, 6.380980827364738],
          [80.2125174656158, 6.359177309351395],
          [80.18616617726354, 6.3539409177899415],
          [80.13477994746194, 6.363108037455291],
          [80.0899659298799, 6.4050147450593045],
          [80.07414836149138, 6.401089006534093],
          [80.05570179520146, 6.411564150292506],
          [80.02671911158842, 6.42203709715514],
          [79.9964062712956, 6.422039853327178],
        ],
      ],
      type: "Polygon",
    },
    properties: {
      name: "Southern Province",
    },
  };

  const MapEventHandler = () => {
    const map = useMapEvent("click", (e) => {
      if (!startPoint) {
        setStartPoint(e.latlng);
      } else if (!endPoint) {
        setEndPoint(e.latlng);
        addRoute(map, startPoint, e.latlng);
      } else {
        // Reset points
        setStartPoint(e.latlng);
        setEndPoint(null);
        map.eachLayer((layer) => {
          if (layer.options && layer.options.waypoints) {
            map.removeLayer(layer);
          }
        });
      }
    });
    return null;
  };

  const addRoute = (map, start, end) => {
    if (start && end) {
      const routeName = prompt("Enter a name for this route:");
      if (routeName) {
        const routingControl = L.Routing.control({
          waypoints: [
            L.latLng(start.lat, start.lng),
            L.latLng(end.lat, end.lng),
          ],
          createMarker: () => null,
        }).addTo(map);

        routingControl.on("routesfound", function (e) {
          const routes = e.routes;
          const summary = routes[0].summary;
          const routeData = {
            name: routeName, // Added route name
            start: start,
            end: end,
            distance: summary.totalDistance,
            time: summary.totalTime,
            waypoints: routes[0].waypoints.map((wp) => ({
              lat: wp.latLng.lat,
              lng: wp.latLng.lng,
            })),
          };
          saveRoute(routeData);
        });
      }
    }
  };

  const saveRoute = async (routeData) => {
    console.log("routeData", routeData);
    try {
      const result = await Swal.fire({
        title: "Are you sure?",
        text: "Do you want to save this route?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, Save it!",
        cancelButtonText: "No, cancel!",
        width: "500px",
        customClass: {
          icon: "swal-icon",
          title: "swal-title",
          content: "swal-text",
          confirmButton: "swal-confirm-button",
          cancelButton: "swal-cancel-button",
        },
      });

      if (!result.isConfirmed) {
        toast.info("Operation canceled.", {
          position: "top-right",
        });
        return;
      }

      const response = await axios.post(
        `${API_BASE_URL}/save-estimated-route`,
        routeData,
        axiosConfig
      );

      if (response.status === 201) {
        console.log("Route saved successfully");
        toast.success("Route saved successfully!", {
          position: "top-right",
        });
      } else {
        console.error("Failed to save route");
        toast.error("Failed to save route.", {
          position: "top-right",
        });
      }
    } catch (error) {
      console.error("Error saving route:", error);
      toast.error("Error saving route.", {
        position: "top-right",
      });
    }
  };

  return (
    <MapContainer
      center={center} // Use the provided center
      zoom={zoom} // Use the provided zoom level
      style={{ height: "100vh", width: "100%" }}
    >
      <TileLayer
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      />
      <MapEventHandler />
      <GeoJSON
        data={southernProvinceGeoJSON}
        style={{
          color: "red",
          weight: 3,
          opacity: 0.5,
          fillColor: "yellow",
          fillOpacity: 0.2,
        }}
      />
      {startPoint && (
        <Marker position={startPoint}>
          <Popup>Start Point</Popup>
        </Marker>
      )}
      {endPoint && (
        <Marker position={endPoint}>
          <Popup>End Point</Popup>
        </Marker>
      )}
    </MapContainer>
  );
};

export default AddRoutes;
